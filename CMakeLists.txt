cmake_minimum_required(VERSION 2.8.2)
project(automaton)

message("C++ Compiler ${CMAKE_CXX_COMPILER}")

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)
        message(FATAL_ERROR "GCC version must be at least 4.8 to support OpenMP")
    endif()
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.8)
        message(FATAL_ERROR "Clang version must be at least 3.8 to support OpenMP.")
    endif()
else()
    message(WARNING "You are using unsupported compiler, and will probably have to change the source code.")
endif()

set(CMAKE_CXX_FLAGS "-std=c++1z -fopenmp")

set(exec automaton)
add_executable(${exec} ./main.cpp)
include_directories($(CMAKE_CURRENT_SOURCE_DIR))

find_package(PkgConfig)

find_package(Threads REQUIRED)
if(THREADS_HAVE_PTHREAD_ARG)
  target_compile_options(${exec} PUBLIC "-pthread")
endif()
if(CMAKE_THREAD_LIBS_INIT)
  target_link_libraries(${exec} "${CMAKE_THREAD_LIBS_INIT}")
endif()

find_package(OpenGL REQUIRED)
if(OPENGL_FOUND)
  add_definitions(-DCOMPILE_GLDEBUG)
  message("using ${OPENGL_LIBRARIES} ${OPENGL_INCLUDE_DIRS}")
  include_directories(${OPENGL_INCLUDE_DIRS})
  target_link_libraries(${exec} ${OPENGL_LIBRARIES})
else()
  message(FATAL_ERROR "OpenGL not found")
endif(OPENGL_FOUND)

#find_package(GLFW3 REQUIRED)
pkg_search_module(GLFW3 REQUIRED glfw3)
pkg_check_modules(GLFW3 glfw3 REQUIRED)
if(GLFW3_FOUND)
  message("using ${GLFW3_LIBRARIES} ${GLFW3_INCLUDE_DIRS}")
  include_directories(${GLFW3_INCLUDE_DIRS})
  target_link_libraries(${exec} ${GLFW3_STATIC_LIBRARIES})
else()
  message(FATAL_ERROR "GLFW3 not found")
endif(GLFW3_FOUND)

find_package(GLEW REQUIRED)
if(GLEW_FOUND)
  message("using ${GLEW_LIBRARIES} ${GLEW_INCLUDE_DIRS}")
  include_directories(${GLEW_INCLUDE_DIRS})
  target_link_libraries(${exec} ${GLEW_LIBRARIES})
else()
  message(FATAL_ERROR "GLEW not found")
endif(GLEW_FOUND)

# find_packagE(OpenCL REQUIRED)
# if(OpenCL_FOUND)
#   message("using OpenCL")
#   include_directories(${OpenCL_INCLUDE_DIRS})
#   target_link_libraries(${exec} ${OpenCL_LIBRARIES})
# else()
#   message(FATAL ERROR "OPENCL not found")
# endif(OpenCL_FOUND)
