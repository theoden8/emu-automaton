#version 430 core
#extension GL_ARB_compute_shader: enable

#define LOCAL_SIZE 8

layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
layout (binding = 0, r8ui) uniform uimage2D initTex;

uniform uint n_states;
uniform ivec2 size;
uniform ivec2 wg_per_cell;
uniform uint seed;

#define w size.x
#define h size.y

uint wang_rng(uint key) {
  key = (~key) + (key << 21);
  key = key ^ (key >> 24);
  key = (key + (key << 3)) + (key << 8);
  key = key ^ (key >> 14);
  key = (key + (key << 2)) + (key << 4);
  key = key ^ (key >> 28);
  key = key + (key << 31);
  return key;
}

uint hash(uint x) {
  x = ((x >> 16) ^ x) * 0x45d9f3b;
  x = ((x >> 16) ^ x) * 0x45d9f3b;
  x = (x >> 16) ^ x;
  return x;
}

uint get_random(ivec2 ind) {
  const uint i = hash(ind.y * size.x + ind.x);
  return wang_rng((i ^ seed) * seed) % n_states;
  //return (wang_rng(ind.x ^ seed) * wang_rng(ind.y + seed)) % n_states;
}

void main(void) {
  const ivec2 wg_ind = ivec2(gl_GlobalInvocationID.xy);
  const int x0 = wg_ind.x * wg_per_cell.x, y0 = wg_ind.y * wg_per_cell.y;
  const int x1 = min(x0 + wg_per_cell.x, w), y1 = min(y0 + wg_per_cell.y, h);
  for(int x = x0; x < x1; ++x) {
    for(int y = y0; y < y1; ++y) {
      ivec2 ind = ivec2(x, y);
      imageStore(initTex, ind, uvec4(get_random(ind)));
    }
  }
}
