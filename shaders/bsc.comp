#version 430 core
#extension GL_ARB_compute_shader: enable

#define LOCAL_SIZE 8

layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
layout (binding = 0, r8ui) uniform uimage2D srcTex;
layout (binding = 1, r8ui) uniform uimage2D dstTex;

uniform uint bs, ss, c;
uniform ivec2 size;
uniform ivec2 wg_per_cell;
uniform uint access_mode;

#define w size.x
#define h size.y

#define BOUNDED 0
#define LOOPED 1

#define DEAD 0
#define LIVE (c - 1)

uint count_moore_neighborhood(ivec2 ind) {
  uint count = 0;
  // moore neighborhood
  for(int ix = -1; ix <= 1; ++ix) {
    for(int iy = -1; iy <= 1; ++iy) {
      if(ix == 0 && iy == 0)continue;
      int x = ind.x + ix,
          y = ind.y + iy;
      if(access_mode == BOUNDED) {
        if(y < 0 || y >= h || x < 0 || x >= w) {
          continue;
        }
      } else if(access_mode == LOOPED) {
        y = (y < 0) ? y + h : ((y >= h) ? y - h : y);
        x = (x < 0) ? x + w : ((x >= w) ? x - w : x);
      }
      count += (imageLoad(srcTex, ivec2(x, y)).r == LIVE) ? 1u : 0u;
    }
  }
  return count;
}

void update_state(ivec2 ind) {
  const uint count = count_moore_neighborhood(ind);
  const uint state = imageLoad(srcTex, ind).r;
  if((state == DEAD && bool(bs & (1 << count))) || (state == LIVE && bool(ss & (1 << count)))) {
    imageStore(dstTex, ind, uvec4(LIVE));
  } else if(state > 0) {
    imageStore(dstTex, ind, uvec4(state - 1));
  } else {
    imageStore(dstTex, ind, uvec4(DEAD));
  }
}

void main(void) {
  const ivec2 wg_ind = ivec2(gl_GlobalInvocationID.xy);
  const int x0 = wg_ind.x * wg_per_cell.x, y0 = wg_ind.y * wg_per_cell.y;
  const int x1 = min(x0 + wg_per_cell.x, w), y1 = min(y0 + wg_per_cell.y, h);
  for(int x = x0; x < x1; ++x) {
    for(int y = y0; y < y1; ++y) {
      update_state(ivec2(x, y));
    }
  }
}
